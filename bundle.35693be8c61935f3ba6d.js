/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * Swipe 2.2.18\n *\n * Brad Birdsall\n * Copyright 2013, MIT License\n *\n*/\n// if the module has no dependencies, the above pattern can be simplified to\n// eslint-disable-next-line no-extra-semi\n;\n\n(function (root, factory) {\n  root = root || {}; // eslint-disable-next-line no-undef\n\n  if (true) {\n    // AMD. Register as an anonymous module.\n    // eslint-disable-next-line no-undef\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      root.Swipe = factory();\n      return root.Swipe;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == 'object' && self.self === self && self || (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) == 'object' && global.global === global && global || this;\n  var _document = root.document;\n\n  function Swipe(container, options) {\n    'use strict';\n\n    options = options || {}; // setup initial vars\n\n    var _start = {};\n    var delta = {};\n    var isScrolling; // setup auto slideshow\n\n    var delay = options.auto || 0;\n    var interval;\n    var disabled = false; // utilities\n    // simple no operation function\n\n    var noop = function noop() {}; // offload a functions execution\n\n\n    var offloadFn = function offloadFn(fn) {\n      setTimeout(fn || noop, 0);\n    }; // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered.\n\n\n    var throttle = function throttle(fn, threshhold) {\n      threshhold = threshhold || 100;\n      var timeout = null;\n\n      function cancel() {\n        if (timeout) clearTimeout(timeout);\n      }\n\n      function throttledFn() {\n        var context = this;\n        var args = arguments;\n        cancel();\n        timeout = setTimeout(function () {\n          timeout = null;\n          fn.apply(context, args);\n        }, threshhold);\n      } // allow remove throttled timeout\n\n\n      throttledFn.cancel = cancel;\n      return throttledFn;\n    }; // check whether event is cancelable\n\n\n    var isCancelable = function isCancelable(event) {\n      if (!event) return false;\n      return typeof event.cancelable !== 'boolean' || event.cancelable;\n    }; // polyfill for browsers that do not support Element.matches()\n\n\n    if (!Element.prototype.matches) {\n      Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n            i = matches.length;\n\n        while (--i >= 0 && matches.item(i) !== this) {\n          ;\n        }\n\n        return i > -1;\n      };\n    } // check browser capabilities\n\n\n    var browser = {\n      addEventListener: !!root.addEventListener,\n      passiveEvents: function () {\n        // Test via a getter in the options object to see if the passive property is accessed\n        var supportsPassive = false;\n\n        try {\n          var opts = Object.defineProperty({}, 'passive', {\n            // eslint-disable-next-line getter-return\n            get: function get() {\n              supportsPassive = true;\n            }\n          });\n          root.addEventListener('testEvent', null, opts);\n          root.removeEventListener('testEvent', null, opts);\n        } catch (e) {\n          supportsPassive = false;\n        }\n\n        return supportsPassive;\n      }(),\n      // eslint-disable-next-line no-undef\n      touch: 'ontouchstart' in root || root.DocumentTouch && _document instanceof DocumentTouch,\n      transitions: function (temp) {\n        var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];\n\n        for (var i in props) {\n          if (temp.style[props[i]] !== undefined) {\n            return true;\n          }\n        }\n\n        return false;\n      }(_document.createElement('swipe'))\n    }; // quit if no root element\n\n    if (!container) return;\n    var element = container.children[0];\n    var slides, slidePos, width, length;\n    var index = parseInt(options.startSlide, 10) || 0;\n    var speed = options.speed || 300;\n    options.continuous = options.continuous !== undefined ? options.continuous : true; // check text direction\n\n    var slideDir = function (el, prop, dir) {\n      if (el.currentStyle) {\n        dir = el.currentStyle[prop];\n      } else if (root.getComputedStyle) {\n        dir = root.getComputedStyle(el, null).getPropertyValue(prop);\n      }\n\n      return 'rtl' === dir ? 'right' : 'left';\n    }(container, 'direction'); // AutoRestart option: auto restart slideshow after user's touch event\n\n\n    options.autoRestart = options.autoRestart !== undefined ? options.autoRestart : false; // throttled setup\n\n    var throttledSetup = throttle(setup); // setup event capturing\n\n    var events = {\n      handleEvent: function handleEvent(event) {\n        if (disabled) return;\n\n        switch (event.type) {\n          case 'mousedown':\n          case 'touchstart':\n            this.start(event);\n            break;\n\n          case 'mousemove':\n          case 'touchmove':\n            this.move(event);\n            break;\n\n          case 'mouseup':\n          case 'mouseleave':\n          case 'touchend':\n            this.end(event);\n            break;\n\n          case 'webkitTransitionEnd':\n          case 'msTransitionEnd':\n          case 'oTransitionEnd':\n          case 'otransitionend':\n          case 'transitionend':\n            this.transitionEnd(event);\n            break;\n\n          case 'resize':\n            throttledSetup();\n            break;\n        }\n\n        if (options.stopPropagation) {\n          event.stopPropagation();\n        }\n      },\n      start: function start(event) {\n        var touches;\n\n        if (isMouseEvent(event)) {\n          touches = event;\n          event.preventDefault(); // For desktop Safari drag\n        } else {\n          touches = event.touches[0];\n        } // check if the user is swiping on an element that the options say to ignore (for example, a scrolling area)\n\n\n        if (options.ignore && touches.target.matches(options.ignore)) {\n          return;\n        } // measure start values\n\n\n        _start = {\n          // get initial touch coords\n          x: touches.pageX,\n          y: touches.pageY,\n          // store time to determine touch duration\n          time: +new Date()\n        }; // used for testing first move event\n\n        isScrolling = undefined; // reset delta and end measurements\n\n        delta = {}; // attach touchmove and touchend listeners\n\n        if (isMouseEvent(event)) {\n          element.addEventListener('mousemove', this, false);\n          element.addEventListener('mouseup', this, false);\n          element.addEventListener('mouseleave', this, false);\n        } else {\n          element.addEventListener('touchmove', this, browser.passiveEvents ? {\n            passive: false\n          } : false);\n          element.addEventListener('touchend', this, false);\n        }\n\n        runDragStart(getPos(), slides[index]);\n      },\n      move: function move(event) {\n        var touches;\n\n        if (isMouseEvent(event)) {\n          touches = event;\n        } else {\n          // ensure swiping with one touch and not pinching\n          if (event.touches.length > 1 || event.scale && event.scale !== 1) {\n            return;\n          } // we can disable scrolling unless it is already in progress\n\n\n          if (options.disableScroll && isCancelable(event)) {\n            event.preventDefault();\n          }\n\n          touches = event.touches[0];\n        } // measure change in x and y\n\n\n        delta = {\n          x: touches.pageX - _start.x,\n          y: touches.pageY - _start.y\n        }; // determine if scrolling test has run - one time test\n\n        if (typeof isScrolling === 'undefined') {\n          isScrolling = !!(isScrolling || Math.abs(delta.x) < Math.abs(delta.y));\n        } // if user is not trying to scroll vertically\n\n\n        if (!isScrolling) {\n          // if it is not already scrolling\n          if (isCancelable(event)) {\n            // prevent native scrolling\n            event.preventDefault();\n          } // stop slideshow\n\n\n          stop(); // increase resistance if first or last slide\n\n          if (options.continuous) {\n            // we don't add resistance at the end\n            translate(circle(index - 1), delta.x + slidePos[circle(index - 1)], 0);\n            translate(index, delta.x + slidePos[index], 0);\n            translate(circle(index + 1), delta.x + slidePos[circle(index + 1)], 0);\n          } else {\n            delta.x = delta.x / (!index && delta.x > 0 || // if first slide and sliding left\n            index === slides.length - 1 && // or if last slide and sliding right\n            delta.x < 0 // and if sliding at all\n            ? Math.abs(delta.x) / width + 1 : // determine resistance level\n            1); // no resistance if false\n            // translate 1:1\n\n            translate(index - 1, delta.x + slidePos[index - 1], 0);\n            translate(index, delta.x + slidePos[index], 0);\n            translate(index + 1, delta.x + slidePos[index + 1], 0);\n          }\n        }\n      },\n      end: function end(event) {\n        // measure duration\n        var duration = +new Date() - _start.time; // determine if slide attempt triggers next/prev slide\n\n        var isValidSlide = Number(duration) < 250 && // if slide duration is less than 250ms\n        Math.abs(delta.x) > 20 || // and if slide amt is greater than 20px\n        Math.abs(delta.x) > width / 2; // or if slide amt is greater than half the width\n        // determine if slide attempt is past start and end\n\n        var isPastBounds = !index && delta.x > 0 || // if first slide and slide amt is greater than 0\n        index === slides.length - 1 && delta.x < 0; // or if last slide and slide amt is less than 0\n\n        if (options.continuous) {\n          isPastBounds = false;\n        } // OLD determine direction of swipe (true:right, false:left)\n        // determine direction of swipe (1: backward, -1: forward)\n\n\n        var direction = Math.abs(delta.x) / delta.x; // if not scrolling vertically\n\n        if (!isScrolling) {\n          if (isValidSlide && !isPastBounds) {\n            // if we're moving right\n            if (direction < 0) {\n              if (options.continuous) {\n                // we need to get the next in this direction in place\n                move(circle(index - 1), -width, 0);\n                move(circle(index + 2), width, 0);\n              } else {\n                move(index - 1, -width, 0);\n              }\n\n              move(index, slidePos[index] - width, speed);\n              move(circle(index + 1), slidePos[circle(index + 1)] - width, speed);\n              index = circle(index + 1);\n            } else {\n              if (options.continuous) {\n                // we need to get the next in this direction in place\n                move(circle(index + 1), width, 0);\n                move(circle(index - 2), -width, 0);\n              } else {\n                move(index + 1, width, 0);\n              }\n\n              move(index, slidePos[index] + width, speed);\n              move(circle(index - 1), slidePos[circle(index - 1)] + width, speed);\n              index = circle(index - 1);\n            }\n\n            runCallback(getPos(), slides[index], direction);\n          } else {\n            if (options.continuous) {\n              move(circle(index - 1), -width, speed);\n              move(index, 0, speed);\n              move(circle(index + 1), width, speed);\n            } else {\n              move(index - 1, -width, speed);\n              move(index, 0, speed);\n              move(index + 1, width, speed);\n            }\n          }\n        } // kill touchmove and touchend event listeners until touchstart called again\n\n\n        if (isMouseEvent(event)) {\n          element.removeEventListener('mousemove', events, false);\n          element.removeEventListener('mouseup', events, false);\n          element.removeEventListener('mouseleave', events, false);\n        } else {\n          element.removeEventListener('touchmove', events, browser.passiveEvents ? {\n            passive: false\n          } : false);\n          element.removeEventListener('touchend', events, false);\n        }\n\n        runDragEnd(getPos(), slides[index]);\n      },\n      transitionEnd: function transitionEnd(event) {\n        var currentIndex = parseInt(event.target.getAttribute('data-index'), 10);\n\n        if (currentIndex === index) {\n          if (delay || options.autoRestart) restart();\n          runTransitionEnd(getPos(), slides[index]);\n        }\n      }\n    }; // trigger setup\n\n    setup(); // start auto slideshow if applicable\n\n    begin(); // Expose the Swipe API\n\n    return {\n      // initialize\n      setup: setup,\n      // go to slide\n      slide: function slide(to, speed) {\n        stop();\n\n        _slide(to, speed);\n      },\n      // move to previous\n      prev: function prev() {\n        stop();\n\n        _prev();\n      },\n      // move to next\n      next: function next() {\n        stop();\n\n        _next();\n      },\n      // Restart slideshow\n      restart: restart,\n      // cancel slideshow\n      stop: stop,\n      // return current index position\n      getPos: getPos,\n      // disable slideshow\n      disable: disable,\n      // enable slideshow\n      enable: enable,\n      // return total number of slides\n      getNumSlides: function getNumSlides() {\n        return length;\n      },\n      // completely remove swipe\n      kill: kill\n    }; // remove all event listeners\n\n    function detachEvents() {\n      if (browser.addEventListener) {\n        // remove current event listeners\n        element.removeEventListener('touchstart', events, browser.passiveEvents ? {\n          passive: true\n        } : false);\n        element.removeEventListener('mousedown', events, false);\n        element.removeEventListener('webkitTransitionEnd', events, false);\n        element.removeEventListener('msTransitionEnd', events, false);\n        element.removeEventListener('oTransitionEnd', events, false);\n        element.removeEventListener('otransitionend', events, false);\n        element.removeEventListener('transitionend', events, false);\n        root.removeEventListener('resize', events, false);\n      } else {\n        root.onresize = null;\n      }\n    } // add event listeners\n\n\n    function attachEvents() {\n      if (browser.addEventListener) {\n        // set touchstart event on element\n        if (browser.touch) {\n          element.addEventListener('touchstart', events, browser.passiveEvents ? {\n            passive: true\n          } : false);\n        }\n\n        if (options.draggable) {\n          element.addEventListener('mousedown', events, false);\n        }\n\n        if (browser.transitions) {\n          element.addEventListener('webkitTransitionEnd', events, false);\n          element.addEventListener('msTransitionEnd', events, false);\n          element.addEventListener('oTransitionEnd', events, false);\n          element.addEventListener('otransitionend', events, false);\n          element.addEventListener('transitionend', events, false);\n        } // set resize event on window\n\n\n        root.addEventListener('resize', events, false);\n      } else {\n        root.onresize = throttledSetup; // to play nice with old IE\n      }\n    } // clone nodes when there is only two slides\n\n\n    function cloneNode(el) {\n      var clone = el.cloneNode(true);\n      element.appendChild(clone); // tag these slides as clones (to remove them on kill)\n\n      clone.setAttribute('data-cloned', true); // Remove id from element\n\n      clone.removeAttribute('id');\n    }\n\n    function setup(opts) {\n      // Overwrite options if necessary\n      if (opts != null) {\n        for (var prop in opts) {\n          options[prop] = opts[prop];\n        }\n      } // cache slides\n\n\n      slides = element.children;\n      length = slides.length; // slides length correction, minus cloned slides\n\n      for (var i = 0; i < slides.length; i++) {\n        if (slides[i].getAttribute('data-cloned')) length--;\n      } // set continuous to false if only one slide\n\n\n      if (slides.length < 2) {\n        options.continuous = false;\n      } // special case if two slides\n\n\n      if (browser.transitions && options.continuous && slides.length < 3) {\n        cloneNode(slides[0]);\n        cloneNode(slides[1]);\n        slides = element.children;\n      } // adjust style on rtl\n\n\n      if ('right' === slideDir) {\n        for (var j = 0; j < slides.length; j++) {\n          slides[j].style.float = 'right';\n        }\n      } // create an array to store current positions of each slide\n\n\n      slidePos = new Array(slides.length); // determine width of each slide\n\n      width = container.getBoundingClientRect().width || container.offsetWidth;\n      element.style.width = slides.length * width * 2 + 'px'; // stack elements\n\n      var pos = slides.length;\n\n      while (pos--) {\n        var slide = slides[pos];\n        slide.style.width = width + 'px';\n        slide.setAttribute('data-index', pos);\n\n        if (browser.transitions) {\n          slide.style[slideDir] = pos * -width + 'px';\n          move(pos, index > pos ? -width : index < pos ? width : 0, 0);\n        }\n      } // reposition elements before and after index\n\n\n      if (options.continuous && browser.transitions) {\n        move(circle(index - 1), -width, 0);\n        move(circle(index + 1), width, 0);\n      }\n\n      if (!browser.transitions) {\n        element.style[slideDir] = index * -width + 'px';\n      }\n\n      container.style.visibility = 'visible'; // reinitialize events\n\n      detachEvents();\n      attachEvents();\n    }\n\n    function _prev() {\n      if (disabled) return;\n\n      if (options.continuous) {\n        _slide(index - 1);\n      } else if (index) {\n        _slide(index - 1);\n      }\n    }\n\n    function _next() {\n      if (disabled) return;\n\n      if (options.continuous) {\n        _slide(index + 1);\n      } else if (index < slides.length - 1) {\n        _slide(index + 1);\n      }\n    }\n\n    function runCallback(pos, index, dir) {\n      if (options.callback) {\n        options.callback(pos, index, dir);\n      }\n    }\n\n    function runTransitionEnd(pos, index) {\n      if (options.transitionEnd) {\n        options.transitionEnd(pos, index);\n      }\n    }\n\n    function runDragStart(pos, index) {\n      if (options.dragStart) {\n        options.dragStart(pos, index);\n      }\n    }\n\n    function runDragEnd(pos, index) {\n      if (options.dragEnd) {\n        options.dragEnd(pos, index);\n      }\n    }\n\n    function circle(index) {\n      // a simple positive modulo using slides.length\n      return (slides.length + index % slides.length) % slides.length;\n    }\n\n    function getPos() {\n      // Fix for the clone issue in the event of 2 slides\n      var currentIndex = index;\n\n      if (currentIndex >= length) {\n        currentIndex = currentIndex - length;\n      }\n\n      return currentIndex;\n    }\n\n    function _slide(to, slideSpeed) {\n      // ensure to is of type 'number'\n      to = typeof to !== 'number' ? parseInt(to, 10) : to; // do nothing if already on requested slide\n\n      if (index === to) return;\n\n      if (browser.transitions) {\n        var direction = Math.abs(index - to) / (index - to); // 1: backward, -1: forward\n        // get the actual position of the slide\n\n        if (options.continuous) {\n          var natural_direction = direction;\n          direction = -slidePos[circle(to)] / width; // if going forward but to < index, use to = slides.length + to\n          // if going backward but to > index, use to = -slides.length + to\n\n          if (direction !== natural_direction) {\n            to = -direction * slides.length + to;\n          }\n        }\n\n        var diff = Math.abs(index - to) - 1; // move all the slides between index and to in the right direction\n\n        while (diff--) {\n          move(circle((to > index ? to : index) - diff - 1), width * direction, 0);\n        }\n\n        to = circle(to);\n        move(index, width * direction, slideSpeed || speed);\n        move(to, 0, slideSpeed || speed);\n\n        if (options.continuous) {\n          // we need to get the next in place\n          move(circle(to - direction), -(width * direction), 0);\n        }\n      } else {\n        to = circle(to);\n        animate(index * -width, to * -width, slideSpeed || speed); // no fallback for a circular continuous if the browser does not accept transitions\n      }\n\n      index = to;\n      offloadFn(function () {\n        runCallback(getPos(), slides[index], direction);\n      });\n    }\n\n    function move(index, dist, speed) {\n      translate(index, dist, speed);\n      slidePos[index] = dist;\n    }\n\n    function translate(index, dist, speed) {\n      var slide = slides[index];\n      var style = slide && slide.style;\n      if (!style) return;\n      style.webkitTransitionDuration = style.MozTransitionDuration = style.msTransitionDuration = style.OTransitionDuration = style.transitionDuration = speed + 'ms';\n      style.webkitTransform = style.msTransform = style.MozTransform = style.OTransform = style.transform = 'translateX(' + dist + 'px)';\n    }\n\n    function animate(from, to, speed) {\n      // if not an animation, just reposition\n      if (!speed) {\n        element.style[slideDir] = to + 'px';\n        return;\n      }\n\n      var start = +new Date();\n      var timer = setInterval(function () {\n        var timeElap = +new Date() - start;\n\n        if (timeElap > speed) {\n          element.style[slideDir] = to + 'px';\n          if (delay || options.autoRestart) restart();\n          runTransitionEnd(getPos(), slides[index]);\n          clearInterval(timer);\n          return;\n        }\n\n        element.style[slideDir] = (to - from) * (Math.floor(timeElap / speed * 100) / 100) + from + 'px';\n      }, 4);\n    }\n\n    function begin() {\n      delay = options.auto || 0;\n      if (delay) interval = setTimeout(_next, delay);\n    }\n\n    function stop() {\n      delay = 0;\n      clearTimeout(interval);\n    }\n\n    function restart() {\n      stop();\n      begin();\n    }\n\n    function disable() {\n      stop();\n      disabled = true;\n    }\n\n    function enable() {\n      disabled = false;\n      restart();\n    }\n\n    function isMouseEvent(e) {\n      return /^mouse/.test(e.type);\n    }\n\n    function kill() {\n      // cancel slideshow\n      stop(); // remove inline styles\n\n      container.style.visibility = ''; // reset element\n\n      element.style.width = '';\n      element.style[slideDir] = ''; // reset slides\n\n      var pos = slides.length;\n\n      while (pos--) {\n        if (browser.transitions) {\n          translate(pos, 0, 0);\n        }\n\n        var slide = slides[pos]; // if the slide is tagged as clone, remove it\n\n        if (slide.getAttribute('data-cloned')) {\n          var _parent = slide.parentElement;\n\n          _parent.removeChild(slide);\n        } // remove styles\n\n\n        slide.style.width = '';\n        slide.style[slideDir] = '';\n        slide.style.webkitTransitionDuration = slide.style.MozTransitionDuration = slide.style.msTransitionDuration = slide.style.OTransitionDuration = slide.style.transitionDuration = '';\n        slide.style.webkitTransform = slide.style.msTransform = slide.style.MozTransform = slide.style.OTransform = ''; // remove custom attributes (?)\n        // slide.removeAttribute('data-index');\n      } // remove all events\n\n\n      detachEvents(); // remove throttled function timeout\n\n      throttledSetup.cancel();\n    }\n  }\n\n  if (root.jQuery || root.Zepto) {\n    (function ($) {\n      $.fn.Swipe = function (params) {\n        return this.each(function () {\n          $(this).data('Swipe', new Swipe($(this)[0], params));\n        });\n      };\n    })(root.jQuery || root.Zepto);\n  }\n\n  return Swipe;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUuc3R5bD9hOTE5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("var header = document.querySelector(\".header\");\nvar burger = header.querySelector(\".header__burger\");\nburger.addEventListener(\"click\", function (evt) {\n  evt.preventDefault();\n  header.classList.toggle(\"header--menu-open\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9oZWFkZXIvaGVhZGVyLmpzPzEyMGUiXSwibmFtZXMiOlsiaGVhZGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYnVyZ2VyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiY2xhc3NMaXN0IiwidG9nZ2xlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixTQUF2QixDQUFmO0FBQ0EsSUFBTUMsTUFBTSxHQUFHSCxNQUFNLENBQUNFLGFBQVAsQ0FBcUIsaUJBQXJCLENBQWY7QUFFQUMsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixPQUF4QixFQUFpQyxVQUFDQyxHQUFELEVBQVM7QUFDdENBLEtBQUcsQ0FBQ0MsY0FBSjtBQUNBTixRQUFNLENBQUNPLFNBQVAsQ0FBaUJDLE1BQWpCLENBQXdCLG1CQUF4QjtBQUNILENBSEQiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGVhZGVyXCIpO1xyXG5jb25zdCBidXJnZXIgPSBoZWFkZXIucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJfX2J1cmdlclwiKTtcclxuXHJcbmJ1cmdlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xyXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBoZWFkZXIuY2xhc3NMaXN0LnRvZ2dsZShcImhlYWRlci0tbWVudS1vcGVuXCIpO1xyXG59KSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsQ0FBSixDLENBRUE7O0FBQ0FBLENBQUMsR0FBSSxZQUFXO0FBQ2YsU0FBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxHQUFDLEdBQUdBLENBQUMsSUFBSSxJQUFJQyxRQUFKLENBQWEsYUFBYixHQUFUO0FBQ0EsQ0FIRCxDQUdFLE9BQU9DLENBQVAsRUFBVTtBQUNYO0FBQ0EsTUFBSSxRQUFPQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQXRCLEVBQWdDSCxDQUFDLEdBQUdHLE1BQUo7QUFDaEMsQyxDQUVEO0FBQ0E7QUFDQTs7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsQ0FBakIiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/style.styl\nvar style = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/components/header/header.js\nvar header = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./node_modules/swipejs/swipe.js\nvar swipe = __webpack_require__(0);\nvar swipe_default = /*#__PURE__*/__webpack_require__.n(swipe);\n\n// CONCATENATED MODULE: ./src/components/rooms-push/rooms-push.js\n\nvar mySwipe = new swipe_default.a(document.querySelector('.rooms-push__slider'), {\n  startSlide: 0,\n  speed: 200,\n  draggable: false,\n  continuous: true,\n  disableScroll: false,\n  stopPropagation: false,\n  ignore: \".scroller\",\n  callback: function callback(index) {\n    document.getElementById(\"\".concat(index, \"room\")).checked = true;\n  }\n});\nvar controls = document.querySelector('.rooms-push .slider__controls');\ncontrols.addEventListener('change', function (evt) {\n  mySwipe.slide(evt.target.id[0]);\n});\n// CONCATENATED MODULE: ./main.js\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yb29tcy1wdXNoL3Jvb21zLXB1c2guanM/Nzg3MiIsIndlYnBhY2s6Ly8vLi9tYWluLmpzPzFkNTAiXSwibmFtZXMiOlsibXlTd2lwZSIsIlN3aXBlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic3RhcnRTbGlkZSIsInNwZWVkIiwiZHJhZ2dhYmxlIiwiY29udGludW91cyIsImRpc2FibGVTY3JvbGwiLCJzdG9wUHJvcGFnYXRpb24iLCJpZ25vcmUiLCJjYWxsYmFjayIsImluZGV4IiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGVja2VkIiwiY29udHJvbHMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0Iiwic2xpZGUiLCJ0YXJnZXQiLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBLElBQU1BLE9BQU8sR0FBRyxJQUFJQyxlQUFKLENBQVVDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixxQkFBdkIsQ0FBVixFQUF5RDtBQUNyRUMsWUFBVSxFQUFFLENBRHlEO0FBRXJFQyxPQUFLLEVBQUUsR0FGOEQ7QUFHckVDLFdBQVMsRUFBRSxLQUgwRDtBQUlyRUMsWUFBVSxFQUFFLElBSnlEO0FBS3JFQyxlQUFhLEVBQUUsS0FMc0Q7QUFNckVDLGlCQUFlLEVBQUUsS0FOb0Q7QUFPckVDLFFBQU0sRUFBRSxXQVA2RDtBQVFyRUMsVUFBUSxFQUFFLGtCQUFTQyxLQUFULEVBQWdCO0FBQ3RCVixZQUFRLENBQUNXLGNBQVQsV0FBMkJELEtBQTNCLFdBQXdDRSxPQUF4QyxHQUFrRCxJQUFsRDtBQUNIO0FBVm9FLENBQXpELENBQWhCO0FBYUEsSUFBTUMsUUFBUSxHQUFHYixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsK0JBQXZCLENBQWpCO0FBQ0FZLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsUUFBMUIsRUFBb0MsVUFBQ0MsR0FBRCxFQUFTO0FBQ3pDakIsU0FBTyxDQUFDa0IsS0FBUixDQUFjRCxHQUFHLENBQUNFLE1BQUosQ0FBV0MsRUFBWCxDQUFjLENBQWQsQ0FBZDtBQUNILENBRkQsRTs7QUNoQkE7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN3aXBlIGZyb20gJ3N3aXBlanMnO1xyXG5cclxuY29uc3QgbXlTd2lwZSA9IG5ldyBTd2lwZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucm9vbXMtcHVzaF9fc2xpZGVyJyksIHtcclxuICAgIHN0YXJ0U2xpZGU6IDAsXHJcbiAgICBzcGVlZDogMjAwLFxyXG4gICAgZHJhZ2dhYmxlOiBmYWxzZSxcclxuICAgIGNvbnRpbnVvdXM6IHRydWUsXHJcbiAgICBkaXNhYmxlU2Nyb2xsOiBmYWxzZSxcclxuICAgIHN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXHJcbiAgICBpZ25vcmU6IFwiLnNjcm9sbGVyXCIsXHJcbiAgICBjYWxsYmFjazogZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtpbmRleH1yb29tYCkuY2hlY2tlZCA9IHRydWU7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuY29uc3QgY29udHJvbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucm9vbXMtcHVzaCAuc2xpZGVyX19jb250cm9scycpO1xyXG5jb250cm9scy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZ0KSA9PiB7XHJcbiAgICBteVN3aXBlLnNsaWRlKGV2dC50YXJnZXQuaWRbMF0pXHJcbn0pXHJcbiIsImltcG9ydCAnLi9zcmMvc3R5bGUuc3R5bCdcclxuaW1wb3J0ICcuL3NyYy9jb21wb25lbnRzL2hlYWRlci9oZWFkZXInXHJcbmltcG9ydCAnLi9zcmMvY29tcG9uZW50cy9yb29tcy1wdXNoL3Jvb21zLXB1c2gnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ })
/******/ ]);